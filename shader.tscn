[gd_scene load_steps=6 format=2]

[sub_resource type="PlaneMesh" id=2]
size = Vector2( 15, 15 )
subdivide_width = 32
subdivide_depth = 32

[sub_resource type="Shader" id=3]
code = "shader_type spatial;

uniform vec4  out_color : hint_color = vec4(0.0, 0.2, 1.0, 1.0);
uniform float height_scale = 0.5;
uniform sampler2D noise;
uniform sampler2D normalmap;

varying vec2 tex_position;

void vertex() {
  tex_position = VERTEX.xz / 2.0 + 0.5;
  float height = texture(noise, tex_position).x;
  VERTEX.y += height * height_scale;
}

render_mode specular_toon;
void fragment() {
  RIM = 0.2;
  METALLIC = 0.0;
  ROUGHNESS = 0.01;
  ALBEDO = vec3(0.1, 0.3, 0.5);
}

void fragment() {
  float fresnel = sqrt(1.0 - dot(NORMAL, VIEW));
  RIM = 0.5;
  METALLIC = 0.0;
  ROUGHNESS = 0.01 * (1.0 - fresnel);
  ALBEDO = out_color.xyz;
}

float height(vec2 position, float time) {
  vec2 offset = 0.01 * cos(position + time);
  return texture(noise, (position / 10.0) - offset).x;
}


void vertex() {
  vec2 pos = VERTEX.xz;
  float k = height(pos, TIME);
  VERTEX.y = k;
  NORMAL = normalize(vec3(k - height(pos + vec2(0.1, 0.0), TIME), 0.1, k - height(pos + vec2(0.0, 0.1), TIME)));
}



"

[sub_resource type="OpenSimplexNoise" id=5]
seed = 3
octaves = 9
period = 0.8

[sub_resource type="NoiseTexture" id=6]
noise = SubResource( 5 )

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/out_color = Color( 0.133333, 0.45098, 0.443137, 1 )
shader_param/height_scale = 0.5
shader_param/noise = SubResource( 6 )

[node name="Spatial" type="Spatial"]

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.0737658, 0 )
mesh = SubResource( 2 )
material/0 = SubResource( 4 )

[node name="OmniLight" type="OmniLight" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.62661, 0 )
light_energy = 1.5
omni_range = 35.812
